#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="UyTerjimeWeb")]
public partial class dcUTWDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAdvertizement(Advertizement instance);
  partial void UpdateAdvertizement(Advertizement instance);
  partial void DeleteAdvertizement(Advertizement instance);
  partial void InsertWorkingMovy(WorkingMovy instance);
  partial void UpdateWorkingMovy(WorkingMovy instance);
  partial void DeleteWorkingMovy(WorkingMovy instance);
  partial void InsertMovieCatgory(MovieCatgory instance);
  partial void UpdateMovieCatgory(MovieCatgory instance);
  partial void DeleteMovieCatgory(MovieCatgory instance);
  partial void InsertPicture(Picture instance);
  partial void UpdatePicture(Picture instance);
  partial void DeletePicture(Picture instance);
  partial void InsertDownload(Download instance);
  partial void UpdateDownload(Download instance);
  partial void DeleteDownload(Download instance);
  partial void InsertMovie(Movie instance);
  partial void UpdateMovie(Movie instance);
  partial void DeleteMovie(Movie instance);
  partial void InsertArticleCatogry(ArticleCatogry instance);
  partial void UpdateArticleCatogry(ArticleCatogry instance);
  partial void DeleteArticleCatogry(ArticleCatogry instance);
  partial void InsertRecommend(Recommend instance);
  partial void UpdateRecommend(Recommend instance);
  partial void DeleteRecommend(Recommend instance);
  partial void InsertArticle(Article instance);
  partial void UpdateArticle(Article instance);
  partial void DeleteArticle(Article instance);
  partial void InsertManager(Manager instance);
  partial void UpdateManager(Manager instance);
  partial void DeleteManager(Manager instance);
  partial void InsertMovieAddr(MovieAddr instance);
  partial void UpdateMovieAddr(MovieAddr instance);
  partial void DeleteMovieAddr(MovieAddr instance);
  partial void InsertMenu(Menu instance);
  partial void UpdateMenu(Menu instance);
  partial void DeleteMenu(Menu instance);
  partial void InsertLink(Link instance);
  partial void UpdateLink(Link instance);
  partial void DeleteLink(Link instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertNote(Note instance);
  partial void UpdateNote(Note instance);
  partial void DeleteNote(Note instance);
  partial void InsertFileFormat(FileFormat instance);
  partial void UpdateFileFormat(FileFormat instance);
  partial void DeleteFileFormat(FileFormat instance);
  partial void InsertDiscType(DiscType instance);
  partial void UpdateDiscType(DiscType instance);
  partial void DeleteDiscType(DiscType instance);
  partial void InsertResolution(Resolution instance);
  partial void UpdateResolution(Resolution instance);
  partial void DeleteResolution(Resolution instance);
  #endregion
	
	public dcUTWDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["UyTerjimeWebConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public dcUTWDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dcUTWDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dcUTWDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public dcUTWDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Advertizement> Advertizements
	{
		get
		{
			return this.GetTable<Advertizement>();
		}
	}
	
	public System.Data.Linq.Table<WorkingMovy> WorkingMovies
	{
		get
		{
			return this.GetTable<WorkingMovy>();
		}
	}
	
	public System.Data.Linq.Table<MovieCatgory> MovieCatgories
	{
		get
		{
			return this.GetTable<MovieCatgory>();
		}
	}
	
	public System.Data.Linq.Table<Picture> Pictures
	{
		get
		{
			return this.GetTable<Picture>();
		}
	}
	
	public System.Data.Linq.Table<Download> Downloads
	{
		get
		{
			return this.GetTable<Download>();
		}
	}
	
	public System.Data.Linq.Table<Movie> Movies
	{
		get
		{
			return this.GetTable<Movie>();
		}
	}
	
	public System.Data.Linq.Table<ArticleCatogry> ArticleCatogries
	{
		get
		{
			return this.GetTable<ArticleCatogry>();
		}
	}
	
	public System.Data.Linq.Table<Recommend> Recommends
	{
		get
		{
			return this.GetTable<Recommend>();
		}
	}
	
	public System.Data.Linq.Table<Article> Articles
	{
		get
		{
			return this.GetTable<Article>();
		}
	}
	
	public System.Data.Linq.Table<Manager> Managers
	{
		get
		{
			return this.GetTable<Manager>();
		}
	}
	
	public System.Data.Linq.Table<MovieAddr> MovieAddrs
	{
		get
		{
			return this.GetTable<MovieAddr>();
		}
	}
	
	public System.Data.Linq.Table<Menu> Menus
	{
		get
		{
			return this.GetTable<Menu>();
		}
	}
	
	public System.Data.Linq.Table<Link> Links
	{
		get
		{
			return this.GetTable<Link>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Note> Notes
	{
		get
		{
			return this.GetTable<Note>();
		}
	}
	
	public System.Data.Linq.Table<FileFormat> FileFormats
	{
		get
		{
			return this.GetTable<FileFormat>();
		}
	}
	
	public System.Data.Linq.Table<DiscType> DiscTypes
	{
		get
		{
			return this.GetTable<DiscType>();
		}
	}
	
	public System.Data.Linq.Table<Resolution> Resolutions
	{
		get
		{
			return this.GetTable<Resolution>();
		}
	}
}

[Table(Name="dbo.Advertizement")]
public partial class Advertizement : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Url;
	
	private string _Title;
	
	private bool _State;
	
	private System.DateTime _AddTime;
	
	private string _NavUrl;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnNavUrlChanging(string value);
    partial void OnNavUrlChanged();
    #endregion
	
	public Advertizement()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(500)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Column(Storage="_NavUrl", DbType="NVarChar(1000)")]
	public string NavUrl
	{
		get
		{
			return this._NavUrl;
		}
		set
		{
			if ((this._NavUrl != value))
			{
				this.OnNavUrlChanging(value);
				this.SendPropertyChanging();
				this._NavUrl = value;
				this.SendPropertyChanged("NavUrl");
				this.OnNavUrlChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.WorkingMovies")]
public partial class WorkingMovy : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Cover;
	
	private string _OtherName;
	
	private System.Nullable<System.DateTime> _ReleaseTime;
	
	private string _Country;
	
	private string _Language;
	
	private string _IMDBUrl;
	
	private string _IMDBID;
	
	private string _Source;
	
	private bool _State;
	
	private string _Url;
	
	private int _WorkingState;
	
	private System.DateTime _AddTime;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCoverChanging(string value);
    partial void OnCoverChanged();
    partial void OnOtherNameChanging(string value);
    partial void OnOtherNameChanged();
    partial void OnReleaseTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseTimeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnIMDBUrlChanging(string value);
    partial void OnIMDBUrlChanged();
    partial void OnIMDBIDChanging(string value);
    partial void OnIMDBIDChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnWorkingStateChanging(int value);
    partial void OnWorkingStateChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    #endregion
	
	public WorkingMovy()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Cover", DbType="NVarChar(1000)")]
	public string Cover
	{
		get
		{
			return this._Cover;
		}
		set
		{
			if ((this._Cover != value))
			{
				this.OnCoverChanging(value);
				this.SendPropertyChanging();
				this._Cover = value;
				this.SendPropertyChanged("Cover");
				this.OnCoverChanged();
			}
		}
	}
	
	[Column(Storage="_OtherName", DbType="NVarChar(200)")]
	public string OtherName
	{
		get
		{
			return this._OtherName;
		}
		set
		{
			if ((this._OtherName != value))
			{
				this.OnOtherNameChanging(value);
				this.SendPropertyChanging();
				this._OtherName = value;
				this.SendPropertyChanged("OtherName");
				this.OnOtherNameChanged();
			}
		}
	}
	
	[Column(Storage="_ReleaseTime", DbType="Date")]
	public System.Nullable<System.DateTime> ReleaseTime
	{
		get
		{
			return this._ReleaseTime;
		}
		set
		{
			if ((this._ReleaseTime != value))
			{
				this.OnReleaseTimeChanging(value);
				this.SendPropertyChanging();
				this._ReleaseTime = value;
				this.SendPropertyChanged("ReleaseTime");
				this.OnReleaseTimeChanged();
			}
		}
	}
	
	[Column(Storage="_Country", DbType="NVarChar(100)")]
	public string Country
	{
		get
		{
			return this._Country;
		}
		set
		{
			if ((this._Country != value))
			{
				this.OnCountryChanging(value);
				this.SendPropertyChanging();
				this._Country = value;
				this.SendPropertyChanged("Country");
				this.OnCountryChanged();
			}
		}
	}
	
	[Column(Storage="_Language", DbType="NVarChar(100)")]
	public string Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[Column(Storage="_IMDBUrl", DbType="NVarChar(1000)")]
	public string IMDBUrl
	{
		get
		{
			return this._IMDBUrl;
		}
		set
		{
			if ((this._IMDBUrl != value))
			{
				this.OnIMDBUrlChanging(value);
				this.SendPropertyChanging();
				this._IMDBUrl = value;
				this.SendPropertyChanged("IMDBUrl");
				this.OnIMDBUrlChanged();
			}
		}
	}
	
	[Column(Storage="_IMDBID", DbType="NVarChar(50)")]
	public string IMDBID
	{
		get
		{
			return this._IMDBID;
		}
		set
		{
			if ((this._IMDBID != value))
			{
				this.OnIMDBIDChanging(value);
				this.SendPropertyChanging();
				this._IMDBID = value;
				this.SendPropertyChanged("IMDBID");
				this.OnIMDBIDChanged();
			}
		}
	}
	
	[Column(Storage="_Source", DbType="NVarChar(1000)")]
	public string Source
	{
		get
		{
			return this._Source;
		}
		set
		{
			if ((this._Source != value))
			{
				this.OnSourceChanging(value);
				this.SendPropertyChanging();
				this._Source = value;
				this.SendPropertyChanged("Source");
				this.OnSourceChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(MAX)")]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_WorkingState", DbType="Int NOT NULL")]
	public int WorkingState
	{
		get
		{
			return this._WorkingState;
		}
		set
		{
			if ((this._WorkingState != value))
			{
				this.OnWorkingStateChanging(value);
				this.SendPropertyChanging();
				this._WorkingState = value;
				this.SendPropertyChanged("WorkingState");
				this.OnWorkingStateChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.MovieCatgory")]
public partial class MovieCatgory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Descraption;
	
	private bool _State;
	
	private EntitySet<Movie> _Movies;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescraptionChanging(string value);
    partial void OnDescraptionChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    #endregion
	
	public MovieCatgory()
	{
		this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Descraption", DbType="NVarChar(MAX)")]
	public string Descraption
	{
		get
		{
			return this._Descraption;
		}
		set
		{
			if ((this._Descraption != value))
			{
				this.OnDescraptionChanging(value);
				this.SendPropertyChanging();
				this._Descraption = value;
				this.SendPropertyChanged("Descraption");
				this.OnDescraptionChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Association(Name="MovieCatgory_Movie", Storage="_Movies", ThisKey="ID", OtherKey="Type")]
	public EntitySet<Movie> Movies
	{
		get
		{
			return this._Movies;
		}
		set
		{
			this._Movies.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Movies(Movie entity)
	{
		this.SendPropertyChanging();
		entity.MovieCatgory = this;
	}
	
	private void detach_Movies(Movie entity)
	{
		this.SendPropertyChanging();
		entity.MovieCatgory = null;
	}
}

[Table(Name="dbo.Picture")]
public partial class Picture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _MovieID;
	
	private string _Descraption;
	
	private string _Url;
	
	private bool _State;
	
	private System.DateTime _AddTime;
	
	private EntityRef<Movie> _Movie;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMovieIDChanging(long value);
    partial void OnMovieIDChanged();
    partial void OnDescraptionChanging(string value);
    partial void OnDescraptionChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    #endregion
	
	public Picture()
	{
		this._Movie = default(EntityRef<Movie>);
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_MovieID", DbType="BigInt NOT NULL")]
	public long MovieID
	{
		get
		{
			return this._MovieID;
		}
		set
		{
			if ((this._MovieID != value))
			{
				if (this._Movie.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMovieIDChanging(value);
				this.SendPropertyChanging();
				this._MovieID = value;
				this.SendPropertyChanged("MovieID");
				this.OnMovieIDChanged();
			}
		}
	}
	
	[Column(Storage="_Descraption", DbType="NVarChar(MAX)")]
	public string Descraption
	{
		get
		{
			return this._Descraption;
		}
		set
		{
			if ((this._Descraption != value))
			{
				this.OnDescraptionChanging(value);
				this.SendPropertyChanging();
				this._Descraption = value;
				this.SendPropertyChanged("Descraption");
				this.OnDescraptionChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(MAX)")]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Association(Name="Movie_Picture", Storage="_Movie", ThisKey="MovieID", OtherKey="ID", IsForeignKey=true)]
	public Movie Movie
	{
		get
		{
			return this._Movie.Entity;
		}
		set
		{
			Movie previousValue = this._Movie.Entity;
			if (((previousValue != value) 
						|| (this._Movie.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Movie.Entity = null;
					previousValue.Pictures.Remove(this);
				}
				this._Movie.Entity = value;
				if ((value != null))
				{
					value.Pictures.Add(this);
					this._MovieID = value.ID;
				}
				else
				{
					this._MovieID = default(long);
				}
				this.SendPropertyChanged("Movie");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Downloads")]
public partial class Download : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Type;
	
	private string _Url;
	
	private System.DateTime _AddTime;
	
	private string _Descraption;
	
	private bool _State;
	
	private long _DownCount;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnDescraptionChanging(string value);
    partial void OnDescraptionChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnDownCountChanging(long value);
    partial void OnDownCountChanged();
    #endregion
	
	public Download()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="NVarChar(100)")]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(MAX)")]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Column(Storage="_Descraption", DbType="NVarChar(MAX)")]
	public string Descraption
	{
		get
		{
			return this._Descraption;
		}
		set
		{
			if ((this._Descraption != value))
			{
				this.OnDescraptionChanging(value);
				this.SendPropertyChanging();
				this._Descraption = value;
				this.SendPropertyChanged("Descraption");
				this.OnDescraptionChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_DownCount", DbType="BigInt NOT NULL")]
	public long DownCount
	{
		get
		{
			return this._DownCount;
		}
		set
		{
			if ((this._DownCount != value))
			{
				this.OnDownCountChanging(value);
				this.SendPropertyChanging();
				this._DownCount = value;
				this.SendPropertyChanged("DownCount");
				this.OnDownCountChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Movie")]
public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private string _Cover;
	
	private string _OtherName;
	
	private System.Nullable<System.DateTime> _ReleaseTime;
	
	private string _Country;
	
	private int _Type;
	
	private string _Language;
	
	private string _Subtitle;
	
	private string _IMDBUrl;
	
	private string _IMDBID;
	
	private string _Director;
	
	private string _Artst;
	
	private string _Source;
	
	private string _Descraption;
	
	private bool _State;
	
	private long _WatchCount;
	
	private long _DownCount;
	
	private System.DateTime _AddTime;
	
	private string _WhatUrl;
	
	private EntitySet<Picture> _Pictures;
	
	private EntitySet<Recommend> _Recommends;
	
	private EntitySet<MovieAddr> _MovieAddrs;
	
	private EntityRef<MovieCatgory> _MovieCatgory;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCoverChanging(string value);
    partial void OnCoverChanged();
    partial void OnOtherNameChanging(string value);
    partial void OnOtherNameChanged();
    partial void OnReleaseTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReleaseTimeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnSubtitleChanging(string value);
    partial void OnSubtitleChanged();
    partial void OnIMDBUrlChanging(string value);
    partial void OnIMDBUrlChanged();
    partial void OnIMDBIDChanging(string value);
    partial void OnIMDBIDChanged();
    partial void OnDirectorChanging(string value);
    partial void OnDirectorChanged();
    partial void OnArtstChanging(string value);
    partial void OnArtstChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnDescraptionChanging(string value);
    partial void OnDescraptionChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnWatchCountChanging(long value);
    partial void OnWatchCountChanged();
    partial void OnDownCountChanging(long value);
    partial void OnDownCountChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnWhatUrlChanging(string value);
    partial void OnWhatUrlChanged();
    #endregion
	
	public Movie()
	{
		this._Pictures = new EntitySet<Picture>(new Action<Picture>(this.attach_Pictures), new Action<Picture>(this.detach_Pictures));
		this._Recommends = new EntitySet<Recommend>(new Action<Recommend>(this.attach_Recommends), new Action<Recommend>(this.detach_Recommends));
		this._MovieAddrs = new EntitySet<MovieAddr>(new Action<MovieAddr>(this.attach_MovieAddrs), new Action<MovieAddr>(this.detach_MovieAddrs));
		this._MovieCatgory = default(EntityRef<MovieCatgory>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Cover", DbType="NVarChar(1000)")]
	public string Cover
	{
		get
		{
			return this._Cover;
		}
		set
		{
			if ((this._Cover != value))
			{
				this.OnCoverChanging(value);
				this.SendPropertyChanging();
				this._Cover = value;
				this.SendPropertyChanged("Cover");
				this.OnCoverChanged();
			}
		}
	}
	
	[Column(Storage="_OtherName", DbType="NVarChar(200)")]
	public string OtherName
	{
		get
		{
			return this._OtherName;
		}
		set
		{
			if ((this._OtherName != value))
			{
				this.OnOtherNameChanging(value);
				this.SendPropertyChanging();
				this._OtherName = value;
				this.SendPropertyChanged("OtherName");
				this.OnOtherNameChanged();
			}
		}
	}
	
	[Column(Storage="_ReleaseTime", DbType="Date")]
	public System.Nullable<System.DateTime> ReleaseTime
	{
		get
		{
			return this._ReleaseTime;
		}
		set
		{
			if ((this._ReleaseTime != value))
			{
				this.OnReleaseTimeChanging(value);
				this.SendPropertyChanging();
				this._ReleaseTime = value;
				this.SendPropertyChanged("ReleaseTime");
				this.OnReleaseTimeChanged();
			}
		}
	}
	
	[Column(Storage="_Country", DbType="NVarChar(100)")]
	public string Country
	{
		get
		{
			return this._Country;
		}
		set
		{
			if ((this._Country != value))
			{
				this.OnCountryChanging(value);
				this.SendPropertyChanging();
				this._Country = value;
				this.SendPropertyChanged("Country");
				this.OnCountryChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				if (this._MovieCatgory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Language", DbType="NVarChar(100)")]
	public string Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[Column(Storage="_Subtitle", DbType="NVarChar(100)")]
	public string Subtitle
	{
		get
		{
			return this._Subtitle;
		}
		set
		{
			if ((this._Subtitle != value))
			{
				this.OnSubtitleChanging(value);
				this.SendPropertyChanging();
				this._Subtitle = value;
				this.SendPropertyChanged("Subtitle");
				this.OnSubtitleChanged();
			}
		}
	}
	
	[Column(Storage="_IMDBUrl", DbType="NVarChar(1000)")]
	public string IMDBUrl
	{
		get
		{
			return this._IMDBUrl;
		}
		set
		{
			if ((this._IMDBUrl != value))
			{
				this.OnIMDBUrlChanging(value);
				this.SendPropertyChanging();
				this._IMDBUrl = value;
				this.SendPropertyChanged("IMDBUrl");
				this.OnIMDBUrlChanged();
			}
		}
	}
	
	[Column(Storage="_IMDBID", DbType="NVarChar(50)")]
	public string IMDBID
	{
		get
		{
			return this._IMDBID;
		}
		set
		{
			if ((this._IMDBID != value))
			{
				this.OnIMDBIDChanging(value);
				this.SendPropertyChanging();
				this._IMDBID = value;
				this.SendPropertyChanged("IMDBID");
				this.OnIMDBIDChanged();
			}
		}
	}
	
	[Column(Storage="_Director", DbType="NVarChar(100)")]
	public string Director
	{
		get
		{
			return this._Director;
		}
		set
		{
			if ((this._Director != value))
			{
				this.OnDirectorChanging(value);
				this.SendPropertyChanging();
				this._Director = value;
				this.SendPropertyChanged("Director");
				this.OnDirectorChanged();
			}
		}
	}
	
	[Column(Storage="_Artst", DbType="NVarChar(1000)")]
	public string Artst
	{
		get
		{
			return this._Artst;
		}
		set
		{
			if ((this._Artst != value))
			{
				this.OnArtstChanging(value);
				this.SendPropertyChanging();
				this._Artst = value;
				this.SendPropertyChanged("Artst");
				this.OnArtstChanged();
			}
		}
	}
	
	[Column(Storage="_Source", DbType="NVarChar(1000)")]
	public string Source
	{
		get
		{
			return this._Source;
		}
		set
		{
			if ((this._Source != value))
			{
				this.OnSourceChanging(value);
				this.SendPropertyChanging();
				this._Source = value;
				this.SendPropertyChanged("Source");
				this.OnSourceChanged();
			}
		}
	}
	
	[Column(Storage="_Descraption", DbType="NVarChar(MAX)")]
	public string Descraption
	{
		get
		{
			return this._Descraption;
		}
		set
		{
			if ((this._Descraption != value))
			{
				this.OnDescraptionChanging(value);
				this.SendPropertyChanging();
				this._Descraption = value;
				this.SendPropertyChanged("Descraption");
				this.OnDescraptionChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_WatchCount", DbType="BigInt NOT NULL")]
	public long WatchCount
	{
		get
		{
			return this._WatchCount;
		}
		set
		{
			if ((this._WatchCount != value))
			{
				this.OnWatchCountChanging(value);
				this.SendPropertyChanging();
				this._WatchCount = value;
				this.SendPropertyChanged("WatchCount");
				this.OnWatchCountChanged();
			}
		}
	}
	
	[Column(Storage="_DownCount", DbType="BigInt NOT NULL")]
	public long DownCount
	{
		get
		{
			return this._DownCount;
		}
		set
		{
			if ((this._DownCount != value))
			{
				this.OnDownCountChanging(value);
				this.SendPropertyChanging();
				this._DownCount = value;
				this.SendPropertyChanged("DownCount");
				this.OnDownCountChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Column(Storage="_WhatUrl", DbType="NChar(1000)")]
	public string WhatUrl
	{
		get
		{
			return this._WhatUrl;
		}
		set
		{
			if ((this._WhatUrl != value))
			{
				this.OnWhatUrlChanging(value);
				this.SendPropertyChanging();
				this._WhatUrl = value;
				this.SendPropertyChanged("WhatUrl");
				this.OnWhatUrlChanged();
			}
		}
	}
	
	[Association(Name="Movie_Picture", Storage="_Pictures", ThisKey="ID", OtherKey="MovieID")]
	public EntitySet<Picture> Pictures
	{
		get
		{
			return this._Pictures;
		}
		set
		{
			this._Pictures.Assign(value);
		}
	}
	
	[Association(Name="Movie_Recommend", Storage="_Recommends", ThisKey="ID", OtherKey="MovieID")]
	public EntitySet<Recommend> Recommends
	{
		get
		{
			return this._Recommends;
		}
		set
		{
			this._Recommends.Assign(value);
		}
	}
	
	[Association(Name="Movie_MovieAddr", Storage="_MovieAddrs", ThisKey="ID", OtherKey="MovieID")]
	public EntitySet<MovieAddr> MovieAddrs
	{
		get
		{
			return this._MovieAddrs;
		}
		set
		{
			this._MovieAddrs.Assign(value);
		}
	}
	
	[Association(Name="MovieCatgory_Movie", Storage="_MovieCatgory", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
	public MovieCatgory MovieCatgory
	{
		get
		{
			return this._MovieCatgory.Entity;
		}
		set
		{
			MovieCatgory previousValue = this._MovieCatgory.Entity;
			if (((previousValue != value) 
						|| (this._MovieCatgory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._MovieCatgory.Entity = null;
					previousValue.Movies.Remove(this);
				}
				this._MovieCatgory.Entity = value;
				if ((value != null))
				{
					value.Movies.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(int);
				}
				this.SendPropertyChanged("MovieCatgory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Pictures(Picture entity)
	{
		this.SendPropertyChanging();
		entity.Movie = this;
	}
	
	private void detach_Pictures(Picture entity)
	{
		this.SendPropertyChanging();
		entity.Movie = null;
	}
	
	private void attach_Recommends(Recommend entity)
	{
		this.SendPropertyChanging();
		entity.Movie = this;
	}
	
	private void detach_Recommends(Recommend entity)
	{
		this.SendPropertyChanging();
		entity.Movie = null;
	}
	
	private void attach_MovieAddrs(MovieAddr entity)
	{
		this.SendPropertyChanging();
		entity.Movie = this;
	}
	
	private void detach_MovieAddrs(MovieAddr entity)
	{
		this.SendPropertyChanging();
		entity.Movie = null;
	}
}

[Table(Name="dbo.ArticleCatogry")]
public partial class ArticleCatogry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private string _Descraption;
	
	private bool _State;
	
	private EntitySet<Article> _Articles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescraptionChanging(string value);
    partial void OnDescraptionChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    #endregion
	
	public ArticleCatogry()
	{
		this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Descraption", DbType="NVarChar(MAX)")]
	public string Descraption
	{
		get
		{
			return this._Descraption;
		}
		set
		{
			if ((this._Descraption != value))
			{
				this.OnDescraptionChanging(value);
				this.SendPropertyChanging();
				this._Descraption = value;
				this.SendPropertyChanged("Descraption");
				this.OnDescraptionChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Association(Name="ArticleCatogry_Article", Storage="_Articles", ThisKey="ID", OtherKey="Catgory")]
	public EntitySet<Article> Articles
	{
		get
		{
			return this._Articles;
		}
		set
		{
			this._Articles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.ArticleCatogry = this;
	}
	
	private void detach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.ArticleCatogry = null;
	}
}

[Table(Name="dbo.Recommend")]
public partial class Recommend : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _MovieID;
	
	private bool _State;
	
	private System.DateTime _AddTime;
	
	private EntityRef<Movie> _Movie;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMovieIDChanging(long value);
    partial void OnMovieIDChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    #endregion
	
	public Recommend()
	{
		this._Movie = default(EntityRef<Movie>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_MovieID", DbType="BigInt NOT NULL")]
	public long MovieID
	{
		get
		{
			return this._MovieID;
		}
		set
		{
			if ((this._MovieID != value))
			{
				if (this._Movie.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMovieIDChanging(value);
				this.SendPropertyChanging();
				this._MovieID = value;
				this.SendPropertyChanged("MovieID");
				this.OnMovieIDChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="Date NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Association(Name="Movie_Recommend", Storage="_Movie", ThisKey="MovieID", OtherKey="ID", IsForeignKey=true)]
	public Movie Movie
	{
		get
		{
			return this._Movie.Entity;
		}
		set
		{
			Movie previousValue = this._Movie.Entity;
			if (((previousValue != value) 
						|| (this._Movie.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Movie.Entity = null;
					previousValue.Recommends.Remove(this);
				}
				this._Movie.Entity = value;
				if ((value != null))
				{
					value.Recommends.Add(this);
					this._MovieID = value.ID;
				}
				else
				{
					this._MovieID = default(long);
				}
				this.SendPropertyChanged("Movie");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Article")]
public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Title;
	
	private string _ArticleContent;
	
	private int _Catgory;
	
	private bool _State;
	
	private System.DateTime _AddTime;
	
	private long _ManagerID;
	
	private long _VistCount;
	
	private EntityRef<ArticleCatogry> _ArticleCatogry;
	
	private EntityRef<Manager> _Manager;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnArticleContentChanging(string value);
    partial void OnArticleContentChanged();
    partial void OnCatgoryChanging(int value);
    partial void OnCatgoryChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnManagerIDChanging(long value);
    partial void OnManagerIDChanged();
    partial void OnVistCountChanging(long value);
    partial void OnVistCountChanged();
    #endregion
	
	public Article()
	{
		this._ArticleCatogry = default(EntityRef<ArticleCatogry>);
		this._Manager = default(EntityRef<Manager>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_ArticleContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ArticleContent
	{
		get
		{
			return this._ArticleContent;
		}
		set
		{
			if ((this._ArticleContent != value))
			{
				this.OnArticleContentChanging(value);
				this.SendPropertyChanging();
				this._ArticleContent = value;
				this.SendPropertyChanged("ArticleContent");
				this.OnArticleContentChanged();
			}
		}
	}
	
	[Column(Storage="_Catgory", DbType="Int NOT NULL")]
	public int Catgory
	{
		get
		{
			return this._Catgory;
		}
		set
		{
			if ((this._Catgory != value))
			{
				if (this._ArticleCatogry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatgoryChanging(value);
				this.SendPropertyChanging();
				this._Catgory = value;
				this.SendPropertyChanged("Catgory");
				this.OnCatgoryChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Column(Storage="_ManagerID", DbType="BigInt NOT NULL")]
	public long ManagerID
	{
		get
		{
			return this._ManagerID;
		}
		set
		{
			if ((this._ManagerID != value))
			{
				if (this._Manager.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnManagerIDChanging(value);
				this.SendPropertyChanging();
				this._ManagerID = value;
				this.SendPropertyChanged("ManagerID");
				this.OnManagerIDChanged();
			}
		}
	}
	
	[Column(Storage="_VistCount", DbType="BigInt NOT NULL")]
	public long VistCount
	{
		get
		{
			return this._VistCount;
		}
		set
		{
			if ((this._VistCount != value))
			{
				this.OnVistCountChanging(value);
				this.SendPropertyChanging();
				this._VistCount = value;
				this.SendPropertyChanged("VistCount");
				this.OnVistCountChanged();
			}
		}
	}
	
	[Association(Name="ArticleCatogry_Article", Storage="_ArticleCatogry", ThisKey="Catgory", OtherKey="ID", IsForeignKey=true)]
	public ArticleCatogry ArticleCatogry
	{
		get
		{
			return this._ArticleCatogry.Entity;
		}
		set
		{
			ArticleCatogry previousValue = this._ArticleCatogry.Entity;
			if (((previousValue != value) 
						|| (this._ArticleCatogry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ArticleCatogry.Entity = null;
					previousValue.Articles.Remove(this);
				}
				this._ArticleCatogry.Entity = value;
				if ((value != null))
				{
					value.Articles.Add(this);
					this._Catgory = value.ID;
				}
				else
				{
					this._Catgory = default(int);
				}
				this.SendPropertyChanged("ArticleCatogry");
			}
		}
	}
	
	[Association(Name="Manager_Article", Storage="_Manager", ThisKey="ManagerID", OtherKey="ID", IsForeignKey=true)]
	public Manager Manager
	{
		get
		{
			return this._Manager.Entity;
		}
		set
		{
			Manager previousValue = this._Manager.Entity;
			if (((previousValue != value) 
						|| (this._Manager.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Manager.Entity = null;
					previousValue.Articles.Remove(this);
				}
				this._Manager.Entity = value;
				if ((value != null))
				{
					value.Articles.Add(this);
					this._ManagerID = value.ID;
				}
				else
				{
					this._ManagerID = default(long);
				}
				this.SendPropertyChanged("Manager");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Manager")]
public partial class Manager : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private int _Type;
	
	private bool _State;
	
	private string _Password;
	
	private string _Email;
	
	private string _TelePhone;
	
	private string _Task;
	
	private System.DateTime _AddTime;
	
	private EntitySet<Article> _Articles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelePhoneChanging(string value);
    partial void OnTelePhoneChanged();
    partial void OnTaskChanging(string value);
    partial void OnTaskChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    #endregion
	
	public Manager()
	{
		this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_TelePhone", DbType="NVarChar(30)")]
	public string TelePhone
	{
		get
		{
			return this._TelePhone;
		}
		set
		{
			if ((this._TelePhone != value))
			{
				this.OnTelePhoneChanging(value);
				this.SendPropertyChanging();
				this._TelePhone = value;
				this.SendPropertyChanged("TelePhone");
				this.OnTelePhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Task", DbType="NVarChar(MAX)")]
	public string Task
	{
		get
		{
			return this._Task;
		}
		set
		{
			if ((this._Task != value))
			{
				this.OnTaskChanging(value);
				this.SendPropertyChanging();
				this._Task = value;
				this.SendPropertyChanged("Task");
				this.OnTaskChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Association(Name="Manager_Article", Storage="_Articles", ThisKey="ID", OtherKey="ManagerID")]
	public EntitySet<Article> Articles
	{
		get
		{
			return this._Articles;
		}
		set
		{
			this._Articles.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.Manager = this;
	}
	
	private void detach_Articles(Article entity)
	{
		this.SendPropertyChanging();
		entity.Manager = null;
	}
}

[Table(Name="dbo.MovieAddr")]
public partial class MovieAddr : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _MovieID;
	
	private string _Url;
	
	private string _FileType;
	
	private string _Resolution;
	
	private string _OtherInfo;
	
	private bool _State;
	
	private System.Nullable<int> _Size;
	
	private System.Nullable<int> _MovieTime;
	
	private long _DownCount;
	
	private long _WatchCount;
	
	private System.DateTime _AddTime;
	
	private EntityRef<Movie> _Movie;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMovieIDChanging(long value);
    partial void OnMovieIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnResolutionChanging(string value);
    partial void OnResolutionChanged();
    partial void OnOtherInfoChanging(string value);
    partial void OnOtherInfoChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnSizeChanging(System.Nullable<int> value);
    partial void OnSizeChanged();
    partial void OnMovieTimeChanging(System.Nullable<int> value);
    partial void OnMovieTimeChanged();
    partial void OnDownCountChanging(long value);
    partial void OnDownCountChanged();
    partial void OnWatchCountChanging(long value);
    partial void OnWatchCountChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    #endregion
	
	public MovieAddr()
	{
		this._Movie = default(EntityRef<Movie>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_MovieID", DbType="BigInt NOT NULL")]
	public long MovieID
	{
		get
		{
			return this._MovieID;
		}
		set
		{
			if ((this._MovieID != value))
			{
				if (this._Movie.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMovieIDChanging(value);
				this.SendPropertyChanging();
				this._MovieID = value;
				this.SendPropertyChanged("MovieID");
				this.OnMovieIDChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(MAX)")]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_FileType", DbType="NVarChar(10)")]
	public string FileType
	{
		get
		{
			return this._FileType;
		}
		set
		{
			if ((this._FileType != value))
			{
				this.OnFileTypeChanging(value);
				this.SendPropertyChanging();
				this._FileType = value;
				this.SendPropertyChanged("FileType");
				this.OnFileTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Resolution", DbType="NVarChar(16)")]
	public string Resolution
	{
		get
		{
			return this._Resolution;
		}
		set
		{
			if ((this._Resolution != value))
			{
				this.OnResolutionChanging(value);
				this.SendPropertyChanging();
				this._Resolution = value;
				this.SendPropertyChanged("Resolution");
				this.OnResolutionChanged();
			}
		}
	}
	
	[Column(Storage="_OtherInfo", DbType="NVarChar(MAX)")]
	public string OtherInfo
	{
		get
		{
			return this._OtherInfo;
		}
		set
		{
			if ((this._OtherInfo != value))
			{
				this.OnOtherInfoChanging(value);
				this.SendPropertyChanging();
				this._OtherInfo = value;
				this.SendPropertyChanged("OtherInfo");
				this.OnOtherInfoChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_Size", DbType="Int")]
	public System.Nullable<int> Size
	{
		get
		{
			return this._Size;
		}
		set
		{
			if ((this._Size != value))
			{
				this.OnSizeChanging(value);
				this.SendPropertyChanging();
				this._Size = value;
				this.SendPropertyChanged("Size");
				this.OnSizeChanged();
			}
		}
	}
	
	[Column(Storage="_MovieTime", DbType="Int")]
	public System.Nullable<int> MovieTime
	{
		get
		{
			return this._MovieTime;
		}
		set
		{
			if ((this._MovieTime != value))
			{
				this.OnMovieTimeChanging(value);
				this.SendPropertyChanging();
				this._MovieTime = value;
				this.SendPropertyChanged("MovieTime");
				this.OnMovieTimeChanged();
			}
		}
	}
	
	[Column(Storage="_DownCount", DbType="BigInt NOT NULL")]
	public long DownCount
	{
		get
		{
			return this._DownCount;
		}
		set
		{
			if ((this._DownCount != value))
			{
				this.OnDownCountChanging(value);
				this.SendPropertyChanging();
				this._DownCount = value;
				this.SendPropertyChanged("DownCount");
				this.OnDownCountChanged();
			}
		}
	}
	
	[Column(Storage="_WatchCount", DbType="BigInt NOT NULL")]
	public long WatchCount
	{
		get
		{
			return this._WatchCount;
		}
		set
		{
			if ((this._WatchCount != value))
			{
				this.OnWatchCountChanging(value);
				this.SendPropertyChanging();
				this._WatchCount = value;
				this.SendPropertyChanged("WatchCount");
				this.OnWatchCountChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Association(Name="Movie_MovieAddr", Storage="_Movie", ThisKey="MovieID", OtherKey="ID", IsForeignKey=true)]
	public Movie Movie
	{
		get
		{
			return this._Movie.Entity;
		}
		set
		{
			Movie previousValue = this._Movie.Entity;
			if (((previousValue != value) 
						|| (this._Movie.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Movie.Entity = null;
					previousValue.MovieAddrs.Remove(this);
				}
				this._Movie.Entity = value;
				if ((value != null))
				{
					value.MovieAddrs.Add(this);
					this._MovieID = value.ID;
				}
				else
				{
					this._MovieID = default(long);
				}
				this.SendPropertyChanged("Movie");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Menu")]
public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Url;
	
	private bool _State;
	
	private string _Title;
	
	private string _Target;
	
	private int _Serial;
	
	private int _Parent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTargetChanging(string value);
    partial void OnTargetChanged();
    partial void OnSerialChanging(int value);
    partial void OnSerialChanged();
    partial void OnParentChanging(int value);
    partial void OnParentChanged();
    #endregion
	
	public Menu()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(MAX)")]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Target", DbType="NVarChar(10)")]
	public string Target
	{
		get
		{
			return this._Target;
		}
		set
		{
			if ((this._Target != value))
			{
				this.OnTargetChanging(value);
				this.SendPropertyChanging();
				this._Target = value;
				this.SendPropertyChanged("Target");
				this.OnTargetChanged();
			}
		}
	}
	
	[Column(Storage="_Serial", DbType="Int NOT NULL")]
	public int Serial
	{
		get
		{
			return this._Serial;
		}
		set
		{
			if ((this._Serial != value))
			{
				this.OnSerialChanging(value);
				this.SendPropertyChanging();
				this._Serial = value;
				this.SendPropertyChanged("Serial");
				this.OnSerialChanged();
			}
		}
	}
	
	[Column(Storage="_Parent", DbType="Int NOT NULL")]
	public int Parent
	{
		get
		{
			return this._Parent;
		}
		set
		{
			if ((this._Parent != value))
			{
				this.OnParentChanging(value);
				this.SendPropertyChanging();
				this._Parent = value;
				this.SendPropertyChanged("Parent");
				this.OnParentChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Links")]
public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Title;
	
	private string _Descraption;
	
	private string _Url;
	
	private string _Image;
	
	private bool _State;
	
	private bool _IsImageLink;
	
	private System.DateTime _AddTime;
	
	private int _Serial;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescraptionChanging(string value);
    partial void OnDescraptionChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnIsImageLinkChanging(bool value);
    partial void OnIsImageLinkChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    partial void OnSerialChanging(int value);
    partial void OnSerialChanged();
    #endregion
	
	public Link()
	{
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NChar(100)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Descraption", DbType="NChar(1000)")]
	public string Descraption
	{
		get
		{
			return this._Descraption;
		}
		set
		{
			if ((this._Descraption != value))
			{
				this.OnDescraptionChanging(value);
				this.SendPropertyChanging();
				this._Descraption = value;
				this.SendPropertyChanged("Descraption");
				this.OnDescraptionChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NChar(500) NOT NULL", CanBeNull=false)]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_Image", DbType="NChar(500)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_IsImageLink", DbType="Bit NOT NULL")]
	public bool IsImageLink
	{
		get
		{
			return this._IsImageLink;
		}
		set
		{
			if ((this._IsImageLink != value))
			{
				this.OnIsImageLinkChanging(value);
				this.SendPropertyChanging();
				this._IsImageLink = value;
				this.SendPropertyChanged("IsImageLink");
				this.OnIsImageLinkChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Column(Storage="_Serial", DbType="Int NOT NULL")]
	public int Serial
	{
		get
		{
			return this._Serial;
		}
		set
		{
			if ((this._Serial != value))
			{
				this.OnSerialChanging(value);
				this.SendPropertyChanging();
				this._Serial = value;
				this.SendPropertyChanged("Serial");
				this.OnSerialChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.[User]")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private string _Name;
	
	private int _Type;
	
	private bool _State;
	
	private string _Password;
	
	private string _Email;
	
	private string _TelePhone;
	
	private string _Task;
	
	private string _Address;
	
	private int _LoginCount;
	
	private int _BuyCount;
	
	private System.DateTime _AddTime;
	
	private EntitySet<Note> _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStateChanging(bool value);
    partial void OnStateChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelePhoneChanging(string value);
    partial void OnTelePhoneChanged();
    partial void OnTaskChanging(string value);
    partial void OnTaskChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLoginCountChanging(int value);
    partial void OnLoginCountChanged();
    partial void OnBuyCountChanging(int value);
    partial void OnBuyCountChanged();
    partial void OnAddTimeChanging(System.DateTime value);
    partial void OnAddTimeChanged();
    #endregion
	
	public User()
	{
		this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="Bit NOT NULL")]
	public bool State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_TelePhone", DbType="NVarChar(30)")]
	public string TelePhone
	{
		get
		{
			return this._TelePhone;
		}
		set
		{
			if ((this._TelePhone != value))
			{
				this.OnTelePhoneChanging(value);
				this.SendPropertyChanging();
				this._TelePhone = value;
				this.SendPropertyChanged("TelePhone");
				this.OnTelePhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Task", DbType="NVarChar(MAX)")]
	public string Task
	{
		get
		{
			return this._Task;
		}
		set
		{
			if ((this._Task != value))
			{
				this.OnTaskChanging(value);
				this.SendPropertyChanging();
				this._Task = value;
				this.SendPropertyChanged("Task");
				this.OnTaskChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(MAX)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_LoginCount", DbType="Int NOT NULL")]
	public int LoginCount
	{
		get
		{
			return this._LoginCount;
		}
		set
		{
			if ((this._LoginCount != value))
			{
				this.OnLoginCountChanging(value);
				this.SendPropertyChanging();
				this._LoginCount = value;
				this.SendPropertyChanged("LoginCount");
				this.OnLoginCountChanged();
			}
		}
	}
	
	[Column(Storage="_BuyCount", DbType="Int NOT NULL")]
	public int BuyCount
	{
		get
		{
			return this._BuyCount;
		}
		set
		{
			if ((this._BuyCount != value))
			{
				this.OnBuyCountChanging(value);
				this.SendPropertyChanging();
				this._BuyCount = value;
				this.SendPropertyChanged("BuyCount");
				this.OnBuyCountChanged();
			}
		}
	}
	
	[Column(Storage="_AddTime", DbType="DateTime NOT NULL")]
	public System.DateTime AddTime
	{
		get
		{
			return this._AddTime;
		}
		set
		{
			if ((this._AddTime != value))
			{
				this.OnAddTimeChanging(value);
				this.SendPropertyChanging();
				this._AddTime = value;
				this.SendPropertyChanged("AddTime");
				this.OnAddTimeChanged();
			}
		}
	}
	
	[Association(Name="User_Note", Storage="_Notes", ThisKey="ID", OtherKey="UserID")]
	public EntitySet<Note> Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			this._Notes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[Table(Name="dbo.Note")]
public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _ID;
	
	private long _UserID;
	
	private string _MovieTitle;
	
	private long _MovieID;
	
	private long _Count;
	
	private System.Nullable<byte> _FileFormat;
	
	private System.Nullable<byte> _DiscType;
	
	private System.Nullable<byte> _Resolution;
	
	private string _Phone;
	
	private string _Address;
	
	private string _Email;
	
	private string _Memo;
	
	private System.DateTime _Date;
	
	private byte _Sate;
	
	private EntityRef<User> _User;
	
	private EntityRef<FileFormat> _FileFormat1;
	
	private EntityRef<DiscType> _DiscType1;
	
	private EntityRef<Resolution> _Resolution1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnMovieTitleChanging(string value);
    partial void OnMovieTitleChanged();
    partial void OnMovieIDChanging(long value);
    partial void OnMovieIDChanged();
    partial void OnCountChanging(long value);
    partial void OnCountChanged();
    partial void OnFileFormatChanging(System.Nullable<byte> value);
    partial void OnFileFormatChanged();
    partial void OnDiscTypeChanging(System.Nullable<byte> value);
    partial void OnDiscTypeChanged();
    partial void OnResolutionChanging(System.Nullable<byte> value);
    partial void OnResolutionChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMemoChanging(string value);
    partial void OnMemoChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSateChanging(byte value);
    partial void OnSateChanged();
    #endregion
	
	public Note()
	{
		this._User = default(EntityRef<User>);
		this._FileFormat1 = default(EntityRef<FileFormat>);
		this._DiscType1 = default(EntityRef<DiscType>);
		this._Resolution1 = default(EntityRef<Resolution>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
	public long UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_MovieTitle", DbType="NVarChar(500)")]
	public string MovieTitle
	{
		get
		{
			return this._MovieTitle;
		}
		set
		{
			if ((this._MovieTitle != value))
			{
				this.OnMovieTitleChanging(value);
				this.SendPropertyChanging();
				this._MovieTitle = value;
				this.SendPropertyChanged("MovieTitle");
				this.OnMovieTitleChanged();
			}
		}
	}
	
	[Column(Storage="_MovieID", DbType="BigInt NOT NULL")]
	public long MovieID
	{
		get
		{
			return this._MovieID;
		}
		set
		{
			if ((this._MovieID != value))
			{
				this.OnMovieIDChanging(value);
				this.SendPropertyChanging();
				this._MovieID = value;
				this.SendPropertyChanged("MovieID");
				this.OnMovieIDChanged();
			}
		}
	}
	
	[Column(Storage="_Count", DbType="BigInt NOT NULL")]
	public long Count
	{
		get
		{
			return this._Count;
		}
		set
		{
			if ((this._Count != value))
			{
				this.OnCountChanging(value);
				this.SendPropertyChanging();
				this._Count = value;
				this.SendPropertyChanged("Count");
				this.OnCountChanged();
			}
		}
	}
	
	[Column(Storage="_FileFormat", DbType="TinyInt")]
	public System.Nullable<byte> FileFormat
	{
		get
		{
			return this._FileFormat;
		}
		set
		{
			if ((this._FileFormat != value))
			{
				if (this._FileFormat1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFileFormatChanging(value);
				this.SendPropertyChanging();
				this._FileFormat = value;
				this.SendPropertyChanged("FileFormat");
				this.OnFileFormatChanged();
			}
		}
	}
	
	[Column(Storage="_DiscType", DbType="TinyInt")]
	public System.Nullable<byte> DiscType
	{
		get
		{
			return this._DiscType;
		}
		set
		{
			if ((this._DiscType != value))
			{
				if (this._DiscType1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDiscTypeChanging(value);
				this.SendPropertyChanging();
				this._DiscType = value;
				this.SendPropertyChanged("DiscType");
				this.OnDiscTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Resolution", DbType="TinyInt")]
	public System.Nullable<byte> Resolution
	{
		get
		{
			return this._Resolution;
		}
		set
		{
			if ((this._Resolution != value))
			{
				if (this._Resolution1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnResolutionChanging(value);
				this.SendPropertyChanging();
				this._Resolution = value;
				this.SendPropertyChanged("Resolution");
				this.OnResolutionChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="NChar(30)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="NVarChar(500)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="NChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Memo", DbType="NVarChar(MAX)")]
	public string Memo
	{
		get
		{
			return this._Memo;
		}
		set
		{
			if ((this._Memo != value))
			{
				this.OnMemoChanging(value);
				this.SendPropertyChanging();
				this._Memo = value;
				this.SendPropertyChanged("Memo");
				this.OnMemoChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Sate", DbType="TinyInt NOT NULL")]
	public byte Sate
	{
		get
		{
			return this._Sate;
		}
		set
		{
			if ((this._Sate != value))
			{
				this.OnSateChanging(value);
				this.SendPropertyChanging();
				this._Sate = value;
				this.SendPropertyChanged("Sate");
				this.OnSateChanged();
			}
		}
	}
	
	[Association(Name="User_Note", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Notes.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Notes.Add(this);
					this._UserID = value.ID;
				}
				else
				{
					this._UserID = default(long);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[Association(Name="FileFormat_Note", Storage="_FileFormat1", ThisKey="FileFormat", OtherKey="ID", IsForeignKey=true)]
	public FileFormat FileFormat1
	{
		get
		{
			return this._FileFormat1.Entity;
		}
		set
		{
			FileFormat previousValue = this._FileFormat1.Entity;
			if (((previousValue != value) 
						|| (this._FileFormat1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FileFormat1.Entity = null;
					previousValue.Notes.Remove(this);
				}
				this._FileFormat1.Entity = value;
				if ((value != null))
				{
					value.Notes.Add(this);
					this._FileFormat = value.ID;
				}
				else
				{
					this._FileFormat = default(Nullable<byte>);
				}
				this.SendPropertyChanged("FileFormat1");
			}
		}
	}
	
	[Association(Name="DiscType_Note", Storage="_DiscType1", ThisKey="DiscType", OtherKey="ID", IsForeignKey=true)]
	public DiscType DiscType1
	{
		get
		{
			return this._DiscType1.Entity;
		}
		set
		{
			DiscType previousValue = this._DiscType1.Entity;
			if (((previousValue != value) 
						|| (this._DiscType1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DiscType1.Entity = null;
					previousValue.Notes.Remove(this);
				}
				this._DiscType1.Entity = value;
				if ((value != null))
				{
					value.Notes.Add(this);
					this._DiscType = value.ID;
				}
				else
				{
					this._DiscType = default(Nullable<byte>);
				}
				this.SendPropertyChanged("DiscType1");
			}
		}
	}
	
	[Association(Name="Resolution_Note", Storage="_Resolution1", ThisKey="Resolution", OtherKey="ID", IsForeignKey=true)]
	public Resolution Resolution1
	{
		get
		{
			return this._Resolution1.Entity;
		}
		set
		{
			Resolution previousValue = this._Resolution1.Entity;
			if (((previousValue != value) 
						|| (this._Resolution1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Resolution1.Entity = null;
					previousValue.Notes.Remove(this);
				}
				this._Resolution1.Entity = value;
				if ((value != null))
				{
					value.Notes.Add(this);
					this._Resolution = value.ID;
				}
				else
				{
					this._Resolution = default(Nullable<byte>);
				}
				this.SendPropertyChanged("Resolution1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FileFormat")]
public partial class FileFormat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _ID;
	
	private string _FileFormat1;
	
	private bool _Enable;
	
	private EntitySet<Note> _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnFileFormat1Changing(string value);
    partial void OnFileFormat1Changed();
    partial void OnEnableChanging(bool value);
    partial void OnEnableChanged();
    #endregion
	
	public FileFormat()
	{
		this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="FileFormat", Storage="_FileFormat1", DbType="NChar(20)")]
	public string FileFormat1
	{
		get
		{
			return this._FileFormat1;
		}
		set
		{
			if ((this._FileFormat1 != value))
			{
				this.OnFileFormat1Changing(value);
				this.SendPropertyChanging();
				this._FileFormat1 = value;
				this.SendPropertyChanged("FileFormat1");
				this.OnFileFormat1Changed();
			}
		}
	}
	
	[Column(Storage="_Enable", DbType="Bit NOT NULL")]
	public bool Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[Association(Name="FileFormat_Note", Storage="_Notes", ThisKey="ID", OtherKey="FileFormat")]
	public EntitySet<Note> Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			this._Notes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.FileFormat1 = this;
	}
	
	private void detach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.FileFormat1 = null;
	}
}

[Table(Name="dbo.DiscType")]
public partial class DiscType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _ID;
	
	private string _DiscType1;
	
	private bool _Enable;
	
	private EntitySet<Note> _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnDiscType1Changing(string value);
    partial void OnDiscType1Changed();
    partial void OnEnableChanging(bool value);
    partial void OnEnableChanged();
    #endregion
	
	public DiscType()
	{
		this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="DiscType", Storage="_DiscType1", DbType="NChar(20)")]
	public string DiscType1
	{
		get
		{
			return this._DiscType1;
		}
		set
		{
			if ((this._DiscType1 != value))
			{
				this.OnDiscType1Changing(value);
				this.SendPropertyChanging();
				this._DiscType1 = value;
				this.SendPropertyChanged("DiscType1");
				this.OnDiscType1Changed();
			}
		}
	}
	
	[Column(Storage="_Enable", DbType="Bit NOT NULL")]
	public bool Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[Association(Name="DiscType_Note", Storage="_Notes", ThisKey="ID", OtherKey="DiscType")]
	public EntitySet<Note> Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			this._Notes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.DiscType1 = this;
	}
	
	private void detach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.DiscType1 = null;
	}
}

[Table(Name="dbo.Resolution")]
public partial class Resolution : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private byte _ID;
	
	private string _Resolution1;
	
	private bool _Enable;
	
	private EntitySet<Note> _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnResolution1Changing(string value);
    partial void OnResolution1Changed();
    partial void OnEnableChanging(bool value);
    partial void OnEnableChanged();
    #endregion
	
	public Resolution()
	{
		this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
		OnCreated();
	}
	
	[Column(Storage="_ID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
	public byte ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="Resolution", Storage="_Resolution1", DbType="NChar(30)")]
	public string Resolution1
	{
		get
		{
			return this._Resolution1;
		}
		set
		{
			if ((this._Resolution1 != value))
			{
				this.OnResolution1Changing(value);
				this.SendPropertyChanging();
				this._Resolution1 = value;
				this.SendPropertyChanged("Resolution1");
				this.OnResolution1Changed();
			}
		}
	}
	
	[Column(Storage="_Enable", DbType="Bit NOT NULL")]
	public bool Enable
	{
		get
		{
			return this._Enable;
		}
		set
		{
			if ((this._Enable != value))
			{
				this.OnEnableChanging(value);
				this.SendPropertyChanging();
				this._Enable = value;
				this.SendPropertyChanged("Enable");
				this.OnEnableChanged();
			}
		}
	}
	
	[Association(Name="Resolution_Note", Storage="_Notes", ThisKey="ID", OtherKey="Resolution")]
	public EntitySet<Note> Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			this._Notes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.Resolution1 = this;
	}
	
	private void detach_Notes(Note entity)
	{
		this.SendPropertyChanging();
		entity.Resolution1 = null;
	}
}
#pragma warning restore 1591
